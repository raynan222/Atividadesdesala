#include <stdio.h>
#include <memory.h>

struct Image{
    int rows;
    int columns;
    int data[262144];
    unsigned char type;
};


void image_in(struct Image *IMAGE){
    FILE *file;
    int i, row, column, size, value;
    
    char type, file_name, some_thing;
    char teste[IMAGE->rows];
    file = fopen("baboon.ascii.pgm", "rb");
    if (file == NULL) {
        printf("Erro na abertura do arquivo de imagem de leitura \n");
    }
    
    fscanf(file, "%s", &type);
//    printf("%s", &type);
    
    fscanf(file, "%s", &file_name);
//    printf("%s", &file_name);
    
    fscanf(file, "%s", &file_name);
//    printf("%s", &file_name);
    
    fscanf(file, "%s", &file_name);
//    printf("%s", &file_name);
    
    fscanf(file, "%s", &file_name);
//    printf("%s", &file_name);

    fscanf(file, "%s", &file_name);
//    printf("%s\n", &file_name);
    
    fscanf(file, "%d", &row);
//    printf("%d \n", row);
    
    fscanf(file, "%d", &column);
//    printf("%d\n", column);
    
    fscanf(file, "%d", &size);
//    printf("%d\n", size);
    
    
    for(i=0; i<=(row * column); i++){
        fscanf(file, "%d", &value);
        IMAGE->data[i] = value;
    }
    
    fclose(file);
    
}

void saveImg(struct Image *image)
{
    int i,j, chars = 0;
    FILE *arq;    //ponteiro para arquivo de saída
    
    arq = fopen("out_teste.ascii.pgm","w");
    if (arq == NULL) {
        printf("Não criou o arquivo de saida");
    }
    
    fprintf(arq,"P2\n");
    fprintf(arq, "# baboon.pgma created by PGMA_IO::PGMA_WRITE.\n");
    fprintf(arq,"%d  %d\n",512,512) ; //cabeçalho do arquivo de saída
    fprintf(arq,"%d\n",255);
    
    int line = 0;
    
    for (i=1; i<262143; i++){
        
        if (line == 511) {
            fprintf(arq, "\n");
            line = 0;
        }
        printf("%d\n", i);
        //            printf("%d", image->data[i*j]);
        //            fprintf(arq, "%d ", image->data[i * j]);
        chars++;
        if (chars == 12) {
            fprintf(arq, "%d \n", image->data[i]);
            chars = 0;
        }else{
            fprintf(arq, "%d  ", image->data[i]);
        }
        line++;
    }
}


void midpoint(struct Image *IMAGE, struct Image *IMAGE1){
    int x, y, i, j, w, z, smin, smax, n;
    int a[11][11];
    n = 11;
    
    for(y=0; y < IMAGE->rows; y++){
        for(x=0; x < IMAGE->columns; x++){
            smin=255;
            smax=0;
//            printf("%d %d\n", x,y);
            for(j=-n/2; j<=n/2; j++){
                for(i=-n/2; i<=n/2; i++){
//
                    if((x+i) < 0 || (x+i) > IMAGE->columns || (y+j) < 0 || (y+j) > IMAGE->rows){
                        a[j+n/2][i+n/2] = -1;
                    }else{
                        a[j+n/2][i+n/2] = IMAGE->data[x+i+(long)(y+j) * IMAGE->columns];
                    }
                }
            }
            for(w=0; w<=n-1;w++){
                for(z=0; z<=n-1; z++){
                    if(a[w][z] < smin && a[w][z] >= 0){
                        smin = a[w][z];
                    }
                    if(a[w][z] > smax && a[w][z] >= 0){
                        if (a[w][z] > 255) {
                            smax = 255;
                        }else{
                            smax = a[w][z];
                        }
                    }
                }
            }
            IMAGE1->data[x + (long) y * IMAGE->columns] = (smin + smax)/2;
//            printf("%d\n", (smin + smax)/2);
            
        }
    }
}

int main()
{
    struct Image in;
    struct Image out;
    in.rows =  512;
    in.columns = 512;
    image_in(&in);
    midpoint(&in,&out);
    saveImg(&out);
    
    return 1;
}
